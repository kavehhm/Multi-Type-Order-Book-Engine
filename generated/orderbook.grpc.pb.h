// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: orderbook.proto
#ifndef GRPC_orderbook_2eproto__INCLUDED
#define GRPC_orderbook_2eproto__INCLUDED

#include "orderbook.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace orderbook {

class OrderBookService final {
 public:
  static constexpr char const* service_full_name() {
    return "orderbook.OrderBookService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddOrder(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest& request, ::orderbook::OrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderResponse>> AsyncAddOrder(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderResponse>>(AsyncAddOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderResponse>> PrepareAsyncAddOrder(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderResponse>>(PrepareAsyncAddOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelOrder(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest& request, ::orderbook::OrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderResponse>> AsyncCancelOrder(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderResponse>>(AsyncCancelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderResponse>> PrepareAsyncCancelOrder(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderResponse>>(PrepareAsyncCancelOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOrderBook(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest& request, ::orderbook::OrderBookResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderBookResponse>> AsyncGetOrderBook(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderBookResponse>>(AsyncGetOrderBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderBookResponse>> PrepareAsyncGetOrderBook(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderBookResponse>>(PrepareAsyncGetOrderBookRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AddOrder(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest* request, ::orderbook::OrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddOrder(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest* request, ::orderbook::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CancelOrder(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest* request, ::orderbook::OrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelOrder(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest* request, ::orderbook::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetOrderBook(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest* request, ::orderbook::OrderBookResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOrderBook(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest* request, ::orderbook::OrderBookResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderResponse>* AsyncAddOrderRaw(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderResponse>* PrepareAsyncAddOrderRaw(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderResponse>* AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderResponse>* PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderBookResponse>* AsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orderbook::OrderBookResponse>* PrepareAsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AddOrder(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest& request, ::orderbook::OrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orderbook::OrderResponse>> AsyncAddOrder(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orderbook::OrderResponse>>(AsyncAddOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orderbook::OrderResponse>> PrepareAsyncAddOrder(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orderbook::OrderResponse>>(PrepareAsyncAddOrderRaw(context, request, cq));
    }
    ::grpc::Status CancelOrder(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest& request, ::orderbook::OrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orderbook::OrderResponse>> AsyncCancelOrder(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orderbook::OrderResponse>>(AsyncCancelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orderbook::OrderResponse>> PrepareAsyncCancelOrder(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orderbook::OrderResponse>>(PrepareAsyncCancelOrderRaw(context, request, cq));
    }
    ::grpc::Status GetOrderBook(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest& request, ::orderbook::OrderBookResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orderbook::OrderBookResponse>> AsyncGetOrderBook(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orderbook::OrderBookResponse>>(AsyncGetOrderBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orderbook::OrderBookResponse>> PrepareAsyncGetOrderBook(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orderbook::OrderBookResponse>>(PrepareAsyncGetOrderBookRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddOrder(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest* request, ::orderbook::OrderResponse* response, std::function<void(::grpc::Status)>) override;
      void AddOrder(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest* request, ::orderbook::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelOrder(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest* request, ::orderbook::OrderResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelOrder(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest* request, ::orderbook::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetOrderBook(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest* request, ::orderbook::OrderBookResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOrderBook(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest* request, ::orderbook::OrderBookResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::orderbook::OrderResponse>* AsyncAddOrderRaw(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orderbook::OrderResponse>* PrepareAsyncAddOrderRaw(::grpc::ClientContext* context, const ::orderbook::AddOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orderbook::OrderResponse>* AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orderbook::OrderResponse>* PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::orderbook::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orderbook::OrderBookResponse>* AsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orderbook::OrderBookResponse>* PrepareAsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::orderbook::GetOrderBookRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrderBook_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddOrder(::grpc::ServerContext* context, const ::orderbook::AddOrderRequest* request, ::orderbook::OrderResponse* response);
    virtual ::grpc::Status CancelOrder(::grpc::ServerContext* context, const ::orderbook::CancelOrderRequest* request, ::orderbook::OrderResponse* response);
    virtual ::grpc::Status GetOrderBook(::grpc::ServerContext* context, const ::orderbook::GetOrderBookRequest* request, ::orderbook::OrderBookResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddOrder() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOrder(::grpc::ServerContext* /*context*/, const ::orderbook::AddOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddOrder(::grpc::ServerContext* context, ::orderbook::AddOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::orderbook::OrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelOrder() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::orderbook::CancelOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelOrder(::grpc::ServerContext* context, ::orderbook::CancelOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::orderbook::OrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::orderbook::GetOrderBookRequest* /*request*/, ::orderbook::OrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrderBook(::grpc::ServerContext* context, ::orderbook::GetOrderBookRequest* request, ::grpc::ServerAsyncResponseWriter< ::orderbook::OrderBookResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddOrder<WithAsyncMethod_CancelOrder<WithAsyncMethod_GetOrderBook<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddOrder() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::orderbook::AddOrderRequest, ::orderbook::OrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::orderbook::AddOrderRequest* request, ::orderbook::OrderResponse* response) { return this->AddOrder(context, request, response); }));}
    void SetMessageAllocatorFor_AddOrder(
        ::grpc::MessageAllocator< ::orderbook::AddOrderRequest, ::orderbook::OrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::orderbook::AddOrderRequest, ::orderbook::OrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOrder(::grpc::ServerContext* /*context*/, const ::orderbook::AddOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::orderbook::AddOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelOrder() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::orderbook::CancelOrderRequest, ::orderbook::OrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::orderbook::CancelOrderRequest* request, ::orderbook::OrderResponse* response) { return this->CancelOrder(context, request, response); }));}
    void SetMessageAllocatorFor_CancelOrder(
        ::grpc::MessageAllocator< ::orderbook::CancelOrderRequest, ::orderbook::OrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::orderbook::CancelOrderRequest, ::orderbook::OrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::orderbook::CancelOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::orderbook::CancelOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::orderbook::GetOrderBookRequest, ::orderbook::OrderBookResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::orderbook::GetOrderBookRequest* request, ::orderbook::OrderBookResponse* response) { return this->GetOrderBook(context, request, response); }));}
    void SetMessageAllocatorFor_GetOrderBook(
        ::grpc::MessageAllocator< ::orderbook::GetOrderBookRequest, ::orderbook::OrderBookResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::orderbook::GetOrderBookRequest, ::orderbook::OrderBookResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::orderbook::GetOrderBookRequest* /*request*/, ::orderbook::OrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrderBook(
      ::grpc::CallbackServerContext* /*context*/, const ::orderbook::GetOrderBookRequest* /*request*/, ::orderbook::OrderBookResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddOrder<WithCallbackMethod_CancelOrder<WithCallbackMethod_GetOrderBook<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddOrder() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOrder(::grpc::ServerContext* /*context*/, const ::orderbook::AddOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelOrder() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::orderbook::CancelOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::orderbook::GetOrderBookRequest* /*request*/, ::orderbook::OrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddOrder() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOrder(::grpc::ServerContext* /*context*/, const ::orderbook::AddOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelOrder() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::orderbook::CancelOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::orderbook::GetOrderBookRequest* /*request*/, ::orderbook::OrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrderBook(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddOrder() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOrder(::grpc::ServerContext* /*context*/, const ::orderbook::AddOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelOrder() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::orderbook::CancelOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOrderBook(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::orderbook::GetOrderBookRequest* /*request*/, ::orderbook::OrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrderBook(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddOrder() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::orderbook::AddOrderRequest, ::orderbook::OrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::orderbook::AddOrderRequest, ::orderbook::OrderResponse>* streamer) {
                       return this->StreamedAddOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddOrder(::grpc::ServerContext* /*context*/, const ::orderbook::AddOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::orderbook::AddOrderRequest,::orderbook::OrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelOrder() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::orderbook::CancelOrderRequest, ::orderbook::OrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::orderbook::CancelOrderRequest, ::orderbook::OrderResponse>* streamer) {
                       return this->StreamedCancelOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::orderbook::CancelOrderRequest* /*request*/, ::orderbook::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::orderbook::CancelOrderRequest,::orderbook::OrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::orderbook::GetOrderBookRequest, ::orderbook::OrderBookResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::orderbook::GetOrderBookRequest, ::orderbook::OrderBookResponse>* streamer) {
                       return this->StreamedGetOrderBook(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::orderbook::GetOrderBookRequest* /*request*/, ::orderbook::OrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrderBook(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::orderbook::GetOrderBookRequest,::orderbook::OrderBookResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddOrder<WithStreamedUnaryMethod_CancelOrder<WithStreamedUnaryMethod_GetOrderBook<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddOrder<WithStreamedUnaryMethod_CancelOrder<WithStreamedUnaryMethod_GetOrderBook<Service > > > StreamedService;
};

}  // namespace orderbook


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_orderbook_2eproto__INCLUDED
